#!/bin/sh

set -e

# If the first argument is a file, treat it as a list of package names
if [ -f "$1" ]; then
    while read -r pkgname; do
        [ -z "$pkgname" ] && continue
        # Skip comments and blank lines
        case "$pkgname" in \#*|"" ) continue ;; esac
        "$0" "$pkgname"
    done < "$1"
    exit 0
fi

PKG="$1"
[ -z "$PKG" ] && echo "Usage: $0 <packagename>|<package-list-file>" && exit 1

: "${KISS_DIRS:=/var/cache/kiss}"
: "${KISS_TMPDIR:=/tmp/kiss}"

src_dir="$KISS_DIRS/sources"
build_dir="$KISS_TMPDIR/build"
pkg_dir="$PKG"
orig_pwd="$PWD"

mkdir -p "$src_dir" "$build_dir"

# Read sources file
[ -f "$pkg_dir/sources" ] || { echo "No sources file in $pkg_dir"; exit 1; }

first_url=""

# Capture directories before unpacking
before_dirs=$(mktemp)
find "$build_dir" -mindepth 1 -maxdepth 1 -type d | sort > "$before_dirs"

while read -r url _; do
    [ -z "$url" ] && continue
    case "$url" in 
        files/*)
            # Copy local file from package's files/ dir
            src_file="$pkg_dir/$url"
            if [ -f "$src_file" ]; then
                echo "Copying $src_file to $build_dir/"
                cp "$src_file" "$build_dir/"
            else
                echo "Missing local file: $src_file"; exit 1
            fi
            continue 
            ;;
    esac
    [ -z "$first_url" ] && first_url="$url"
    # Search all subdirs for the file
    file="$(find "$src_dir" -type f -name "${url##*/}" 2>/dev/null | head -n1)"
    [ -z "$file" ] && file="$src_dir/${url##*/}"
    # Download if not present
    if [ ! -f "$file" ]; then
        file="$src_dir/${url##*/}"
        echo "Downloading $url..."
        wget -O "$file" "$url"
    else
        echo "Source $file already exists."
    fi
    # Unpack or copy
    case "$file" in
        *.patch) cp "$file" "$build_dir/" ;;
        *.tar.gz|*.tgz) tar -xzf "$file" -C "$build_dir" ;;
        *.tar.bz2)      tar -xjf "$file" -C "$build_dir" ;;
        *.tar.xz)       tar -xJf "$file" -C "$build_dir" ;;
        *.tar.zst)      tar --use-compress-program=unzstd -xf "$file" -C "$build_dir" ;;
        *.zip)          unzip -d "$build_dir" "$file" ;;
        *)              echo "Unknown archive type: $file"; exit 1 ;;
    esac
done < "$pkg_dir/sources"

# Capture directories after unpacking
after_dirs=$(mktemp)
find "$build_dir" -mindepth 1 -maxdepth 1 -type d | sort > "$after_dirs"

# Find the new directory created by the first source
first_dir=$(comm -13 "$before_dirs" "$after_dirs" | head -n1)
rm -f "$before_dirs" "$after_dirs"
[ -z "$first_dir" ] && first_dir="$build_dir"

cleanup() {
    rm -rf "$build_dir"
}
trap cleanup EXIT INT TERM

# Run build script
if [ -x "$pkg_dir/build" ]; then
    echo "Running build script in $first_dir..."
    (cd "$first_dir" && "$orig_pwd/$pkg_dir/build" "$first_dir")
else
    echo "No executable build script found in $pkg_dir"
    exit 1
fi