#!/bin/sh -e

zcat config.gz > .config
make oldconfig
while true; do
    read -p "Save updated kernel config to repo package? [yes/no]: " answer
    case "${answer,,}" in   # ,, lowercases the input (bashism)
        yes)
            gzip -c .config > /repo/sauzeros/extra/$3/files/config.gz
            echo "Kernel config saved to repo package."
            break
            ;;
        no)
            echo "Skipping kernel config save."
            break
            ;;
        *)
            echo "Please type 'yes' or 'no'."
            ;;
    esac
done

make all

# install kernel
install -d $1/boot
cp arch/x86/boot/bzImage $1/boot/vmlinuz-sauzerOS-live

# install modules
ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$1/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install

# remove build link
rm $1/usr/lib/modules/$2-sauzerOS-live/build

# install headers

builddir=$1/usr/lib/modules/$2-sauzerOS-live/build

install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
  vmlinux tools/bpf/bpftool/vmlinux.h || true
install -Dt "$builddir/kernel" -m644 kernel/Makefile
install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
cp -t "$builddir" -a scripts
ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

# required when STACK_VALIDATION is enabled
install -Dt "$builddir/tools/objtool" tools/objtool/objtool || true

# required when DEBUG_INFO_BTF_MODULES is enabled
install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids || true

echo "Installing headers..."
cp -t "$builddir" -a include
cp -t "$builddir/arch/x86" -a arch/x86/include
install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

# https://bugs.archlinux.org/task/13146
install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

# https://bugs.archlinux.org/task/20402
install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

# https://bugs.archlinux.org/task/71392
install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

echo "Installing KConfig files..."
find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

echo "Installing Rust files..."
install -Dt "$builddir/rust" -m644 rust/*.rmeta || true
install -Dt "$builddir/rust" rust/*.so || true

echo "Installing unstripped VDSO..."
make INSTALL_MOD_PATH="$1/usr" vdso_install \
link=  # Suppress build-id symlinks

echo "Removing unneeded architectures..."
for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
done

echo "Removing documentation..."
rm -r "$builddir/Documentation"

echo "Removing broken symlinks..."
find -L "$builddir" -type l -printf 'Removing %P\n' -delete

echo "Removing loose objects..."
find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

echo "Stripping build tools..."
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)


echo "Adding symlink..."
mkdir -p "$1/usr/src"
  ln -sr "$builddir" "$1/usr/src/linux"
